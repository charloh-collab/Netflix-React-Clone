[{"/home/charlo/Documents/React Projets/netflix-clone/src/reportWebVitals.js":"1","/home/charlo/Documents/React Projets/netflix-clone/src/App.js":"2","/home/charlo/Documents/React Projets/netflix-clone/src/index.js":"3","/home/charlo/Documents/React Projets/netflix-clone/src/Row.js":"4","/home/charlo/Documents/React Projets/netflix-clone/src/axios.js":"5","/home/charlo/Documents/React Projets/netflix-clone/src/Banner.js":"6","/home/charlo/Documents/React Projets/netflix-clone/src/Requests.js":"7","/home/charlo/Documents/React Projets/netflix-clone/src/Nav.js":"8"},{"size":362,"mtime":1608709622609,"results":"9","hashOfConfig":"10"},{"size":891,"mtime":1609072936900,"results":"11","hashOfConfig":"10"},{"size":500,"mtime":1608709622609,"results":"12","hashOfConfig":"10"},{"size":1952,"mtime":1609492388841,"results":"13","hashOfConfig":"10"},{"size":179,"mtime":1608715559832,"results":"14","hashOfConfig":"10"},{"size":1545,"mtime":1608845342221,"results":"15","hashOfConfig":"10"},{"size":714,"mtime":1608831894150,"results":"16","hashOfConfig":"10"},{"size":868,"mtime":1609076008128,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"x50w4f",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"/home/charlo/Documents/React Projets/netflix-clone/src/reportWebVitals.js",[],["38","39"],"/home/charlo/Documents/React Projets/netflix-clone/src/App.js",[],["40","41"],"/home/charlo/Documents/React Projets/netflix-clone/src/index.js",[],["42","43"],"/home/charlo/Documents/React Projets/netflix-clone/src/Row.js",["44"],"import React, { useState, useEffect } from \"react\";\nimport YouTube from \"react-youtube\";\nimport axios from './axios';\nimport './Row.css';\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ tittle, fetchUrl,isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n   const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  //a snippet of code which runs based on specific condition\n\n  useEffect(() => {\n    //if its empty [], run once and dont run again\n\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      //https://api.themoviedb.org/3/\n\n      setMovies(request.data.results);\n\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n\n    const opts = {\n      height: '390',\n      width: '100%',\n      playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        autoplay: 1,\n      },\n    };\n\n\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie.name || \"\")\n      .then((url)  => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get(\"v\"));\n\n      })\n      .catch((error)  => console.log(error));\n    }\n  }\n\n  return (\n    <div className=\"row\">\n      <h2>{tittle}</h2>\n      <div className=\"row__posters\">\n\n        {/*Several Row posters */}\n\n        {movies.map((movie) => (\n          //\"image url extension.png\"\n          <img \n          key={movie.id}\n          onClick={() => handleClick(movie)}\n          className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n          src={`${base_url}${\n            isLargeRow ? movie.poster_path : movie.backdrop_path\n           }`} \n           alt={movie.name}\n            />\n        ))}\n\n      </div>\n     {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>} \n    </div>\n  );\n}\n\nexport default Row;\n","/home/charlo/Documents/React Projets/netflix-clone/src/axios.js",[],"/home/charlo/Documents/React Projets/netflix-clone/src/Banner.js",[],"/home/charlo/Documents/React Projets/netflix-clone/src/Requests.js",[],"/home/charlo/Documents/React Projets/netflix-clone/src/Nav.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"45","replacedBy":"49"},{"ruleId":"47","replacedBy":"50"},{"ruleId":"45","replacedBy":"51"},{"ruleId":"47","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":5,"column":8,"nodeType":"55","messageId":"56","endLine":5,"endColumn":15},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],["57"],["58"],["57"],["58"],"no-unused-vars","'Youtube' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]